<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Jmeter切换测试环境]]></title>
      <url>/posts/2018/7f7b43cb/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;使用jmeter也有一段时间了，最近要求在自动化中实现不同测试环境的切换，其中涉及到切换服务器地址，请求头，账户数据等等。搜索了一番之后，总结出来几种实现方式记录如下<br>综合整理之后，发现让jmeter读取属性共有一下集中方案：<br>1.使用CSV Data Set Config读取需要替换的结果<br>2.修改jmeter/bin目录下的user.properties的值<br>3.在命令行模式下使用-p 参数指定读取的文件<br>4.使用XPath读取指定变量值<br>5.使用beanshell编写脚本实现<br>6.使用插件实现</p>
<p>&emsp;&emsp;通过多方对比（其实就是懒…)选择了使用现有插件来实现属性的读取，方便快捷。<br>插件截图如下：<br><img src="plugpath.png" alt="插件打开方式"><br></p>
<ul>
<li><p>选择文件之后，在需要使用的地方，使用${__P(参数名)}就可以直接访问了文件里定义的属性了。<br><img src="plugmainui.png" alt="插件打开方式"><br></p>
</li>
<li><p><a href="tag-jmeter-extn-1.1.jar">获取插件</a><br></p>
</li>
</ul>
<p>PS:文件定义格式参见jmeter自带的user.properties</p>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jmeter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jmeter 脚本组织规范]]></title>
      <url>/posts/2018/7205a78b/</url>
      <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul>
<li>Root–&gt; 根目录<ul>
<li>config–&gt; 存放配置文件</li>
<li>data–&gt; 存放测试数据文件</li>
<li>script–&gt; 存放测试脚本<ul>
<li>api分类目录1–&gt; 大的分类，如Management<ul>
<li>api子目录1–&gt; 如management下的games</li>
</ul>
</li>
<li>api分类目录2<ul>
<li>api子目录2  </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="命名定义"><a href="#命名定义" class="headerlink" title="命名定义"></a>命名定义</h2><p>Tips: 文件名定义使用小驼峰的方式，多个单词进行拼接的每个单词首字母大写（第一个单词首字母不大写），如服务器地址，则写为serverUrl</p>
<ul>
<li>config.properties –&gt; 存放基础配置信息<ul>
<li>服务器地址: serverUrl</li>
<li>数据库地址： dataUrl</li>
<li>数据库用户名： dataUsername</li>
<li>数据库密码： dataPassword</li>
<li>Content-Type: contentType</li>
<li>x_youle_admintoken: youleAdmintoken</li>
<li>x_youle_appid: youleAppId</li>
<li>x_youle_appsignkey: youleAppSignKey</li>
<li>x_youle_flag: youleFlag</li>
<li>x_youle_parkid:youleParkId</li>
<li>x_youle_sessiontoken: youleSessionToken</li>
<li>x_youle_type: youleType</li>
</ul>
</li>
</ul>
<hr>
<h2 id="data-properties–-gt-存放账号等公用信息"><a href="#data-properties–-gt-存放账号等公用信息" class="headerlink" title="data.properties–&gt;存放账号等公用信息"></a>data.properties–&gt;存放账号等公用信息</h2><ul>
<li>用户名：userName</li>
<li>手机号：phone</li>
<li>邮箱：email</li>
<li>sioeyeid:sioeyeId</li>
<li>相机IMEI:imei</li>
<li>游乐园名字:parkName</li>
<li>游乐园ID:parkId</li>
<li>游戏名字：gameName</li>
<li>游戏ID:gameId</li>
</ul>
<h2 id="其他参考变量名"><a href="#其他参考变量名" class="headerlink" title="其他参考变量名"></a>其他参考变量名</h2><ul>
<li>头像地址：avatarUrl</li>
<li>头像：avatar</li>
<li>缩略图：thumbnail</li>
<li>视频地址：videoUrl</li>
<li>图片地址：imageUrl</li>
<li>昵称：nickName</li>
<li>sioeye运维：sioeyeApp</li>
<li>sioeye运营：sioeyeWeb</li>
<li>sioeye管理员:sioeyeAdmin</li>
<li>游乐园运维：parkApp</li>
<li>游乐园运营：parkWeb</li>
<li>游乐园管理员：parkAdmin</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rules </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android Device Monitor 启动报错]]></title>
      <url>/posts/2018/af022983/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp; Android studio升级到3.0.1之后，发现启动Android Device Monitors时，报错，怎么也无法启动，只能得到一个错误信息。<br><img src="error_message_gui.png" alt="错误提示"><br><br>&emsp;&emsp;打开log错误信息如下(贴了最前面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">!SESSION 2018-04-15 18:07:22.993 -----------------------------------------------</div><div class="line">eclipse.buildId=unknown</div><div class="line">java.version=9.0.4</div><div class="line">java.vendor=Oracle Corporation</div><div class="line">BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US</div><div class="line">Command-line arguments:  -os win32 -ws win32 -arch x86_64 -data @noDefault</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.735</div><div class="line">!MESSAGE Bundle reference:file:org.apache.ant_1.8.3.v201301120609/@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.747</div><div class="line">!MESSAGE Bundle reference:file:org.apache.jasper.glassfish_2.2.2.v201205150955.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.749</div><div class="line">!MESSAGE Bundle reference:file:org.apache.lucene.core_2.9.1.v201101211721.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.816</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.help.base_3.6.101.v201302041200.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.817</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.help.ui_3.5.201.v20130108-092756.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.818</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.help.webapp_3.6.101.v20130116-182509.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.821</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.jetty.server_8.1.3.v20120522.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.827</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.platform.doc.user_4.2.2.v20130121-200410.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.829</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.team.core_3.6.100.v20120524-0627.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.831</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.team.ui_3.6.201.v20130125-135424.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.833</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.ui.cheatsheets_3.4.200.v20120521-2344.jar@4 not found.</div><div class="line"></div><div class="line">!ENTRY org.eclipse.osgi 4 0 2018-04-15 18:07:23.837</div><div class="line">!MESSAGE Bundle reference:file:org.eclipse.ui.intro_3.4.200.v20120521-2344.jar@4 not found.</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;找了很久终于找到了解决方案，记录如下，把Android studio当前使用jre文件夹拷贝到monitor-x86-64目录下即可，再次启动就不报错了。<br><img src="jre_location.png" alt="Android stuido jdk 目录"><br><img src="jre_monitor64.png" alt=""><br>PS:在Android 3.1版本中，已经从界面上去掉了Android Device Monitor的接口，需要通过命令来启动”monitor”.</p>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从已有的pk8证书创建.keystore证书]]></title>
      <url>/posts/2017/8b655df3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文是在Windows下的操作，需要安装Java和openssl，或者使用<a href="http://cmder.net/" target="_blank" rel="external">cmder</a>。<br>如果是在Linux下且<font color="red">pk8证书无密码</font>，可以直接使用<a href="https://github.com/getfatday/keytool-importkeypair" target="_blank" rel="external">keytool-importkeypair
</a>进行一步转换。<br><a id="more"></a></p>
</blockquote>
<p>&emsp;&emsp;本文主要是记录将android pk8证书转换为.keystore格式的过程和注意事项。整个过程共分为三个部分。</p>
<h2 id="Part-1：-把pk8证书有DER格式转化为PEM格式"><a href="#Part-1：-把pk8证书有DER格式转化为PEM格式" class="headerlink" title="Part 1： 把pk8证书有DER格式转化为PEM格式"></a>Part 1： 把pk8证书有DER格式转化为PEM格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs8 in platform.pk8 -passin pass:Password -inform DER -out platform.pem</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="Use-pk8-certificate-to-generate-keystore-file/pk82pem.png" alt=""></h2><p>参数解析：</p>
<pre><code>- pkcs8 证书类型格式
- in 输入来源
- passin 密码来源（可选）
- inform 证书格式
- out 输出证书名字
</code></pre><blockquote>
<p>更多信息请使用openssl pkcs8 -help了解</p>
</blockquote>
<h2 id="Part-2：生成pkcs12证书"><a href="#Part-2：生成pkcs12证书" class="headerlink" title="Part 2：生成pkcs12证书"></a>Part 2：生成pkcs12证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs12 -export -in platform.x509.pem -inkey platform.pem -out shared.pk12 -name certdemo</div></pre></td></tr></table></figure>
<p><img src="Use-pk8-certificate-to-generate-keystore-file/pk82pem.png" alt=""></p>
<h2 id="emsp-emsp-设置密码后，证书生成完毕。"><a href="#emsp-emsp-设置密码后，证书生成完毕。" class="headerlink" title="&emsp;&emsp;设置密码后，证书生成完毕。"></a>&emsp;&emsp;设置密码后，证书生成完毕。</h2><p>参数解析：</p>
<pre><code>- pkcs12 证书格式类型
- export 输出
- in 文件来源
- inkey 导入证书的来源
- out 输出证书的名字
- name keystore里的alias。
</code></pre><h2 id="把证书信息导入keystore里"><a href="#把证书信息导入keystore里" class="headerlink" title="把证书信息导入keystore里"></a>把证书信息导入keystore里</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -deststorepass demdemo -destkeypass demodemo -destkeystore cerrtdemo.keystore -srckeystore shared.pk12 -srcstoretype PKCS12 -srcstorrepass demo -alias certdemo</div></pre></td></tr></table></figure>
<p><img src="Use-pk8-certificate-to-generate-keystore-file/certdemokeystore.png" alt=""></p>
<hr>
<p>参数解析：</p>
<pre><code>- deststorepass keystore的密码
- destkeyustore keystore的名字
- srckeystore 证书来源
- srcstoretype 来源证书的类型
- srcstorrepass 来源证书的密码
- alias 来源证书的别名
</code></pre>]]></content>
      
        <categories>
            
            <category> Dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> signature </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[连接KaiOS设备]]></title>
      <url>/posts/2017/6885425e/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如果还没搭建好环境，请先搭建环境，使用真机时，跳过模拟器安装部分即可。</p>
</blockquote>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Eng版本</div><div class="line">需要打开Root权限</div></pre></td></tr></table></figure>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>更改Debugger（Setting-Device-Developer-Debugger）的值为<code>ADB and DevTools</code><a id="more"></a>
<h3 id="获取Root权限"><a href="#获取Root权限" class="headerlink" title="获取Root权限"></a>获取Root权限</h3></li>
<li>通过adb命令获取Root权限<code>adb root</code></li>
</ul>
<h3 id="连接手机"><a href="#连接手机" class="headerlink" title="连接手机"></a>连接手机</h3><p>在WebIDE的右边找到<code>USB DEVICES</code>选项，点击下方的手机，进行连接(红框部分）<br><img src="KaiOS-Test-on-Devices/connection_devices.png" alt=""><br>成功连接之后如下图：<br><img src="KaiOS-Test-on-Devices/connected.png" alt=""><br>在连接成功之后，会看到一个警告，我们忽视它即可。<br><img src="KaiOS-Test-on-Devices/warning.png" alt=""></p>
<blockquote>
<p>如果提示连接失败，可以尝试关掉WebIDE，重启adb服务，再次连接。如果还是连接不上，则尝试关掉WebIDE，重启手机，再次连接。</p>
</blockquote>
<h3 id="请求更高权限"><a href="#请求更高权限" class="headerlink" title="请求更高权限"></a>请求更高权限</h3><blockquote>
<p>一定要先通过<code>adb root</code>获取root权限，如果页面上点击 root，或出现连接不上的情况</p>
<ul>
<li>在WebIDE中打开RunTime Info，点击<code>request higher privileges</code>并等待手机重启完成。<br><img src="KaiOS-Test-on-Devices/request.png" alt=""></li>
</ul>
</blockquote>
<h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><ul>
<li>点击WebIDE左边的程序就可以打开程序了。<br><img src="KaiOS-Test-on-Devices/layout.png" alt=""></li>
</ul>
<h3 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h3><blockquote>
<p>在WebIDE中点击页面元素，手机端会同步显示对应的内容，如下图：<br><img src="KaiOS-Test-on-Devices/analyze1.png" alt=""></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gaiatest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KaiOS自动化环境搭建]]></title>
      <url>/posts/2017/8de7830d/</url>
      <content type="html"><![CDATA[<blockquote>
<p>KaiOS自动化环境搭建记录，记录备查。</p>
</blockquote>
<h2 id="基本软件安装"><a href="#基本软件安装" class="headerlink" title="基本软件安装"></a>基本软件安装</h2><ul>
<li>Pythons 2.7.x</li>
<li>pip（需要先安装Python）</li>
<li>FireFox 浏览器（最新版本）<a id="more"></a>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2></li>
<li>Python版本需要安装2.7.x的，可以在命令行里使用p<code>ython --version</code>查看当前pythond版本信息。</li>
</ul>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><ul>
<li><a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="external">点击下载pip模块</a></li>
<li><a href="http://pip.readthedocs.io/en/latest/installing/" target="_blank" rel="external">或者根据页面提示操作</a></li>
<li>配置环境变量方便后续使用，如果不配置则使用pip命令时，需要添加<code>python -m</code>前缀</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">把Python的Scripts文件夹添加到系统Patch路劲里</div><div class="line">C:\Python27\Scripts</div></pre></td></tr></table></figure>
<ul>
<li>查看pip版本<ul>
<li>pip –version</li>
</ul>
</li>
<li>更新<ul>
<li>pip install -U pip</li>
</ul>
</li>
</ul>
<h2 id="安装Marionette-模块客户端（client）"><a href="#安装Marionette-模块客户端（client）" class="headerlink" title="安装Marionette 模块客户端（client）"></a>安装Marionette 模块客户端（client）</h2><ul>
<li>在FireFox OS中内置了Marionette 服务端，因此PC上只需要安装Marionette客户端模块即可)<br><br>整个结构如下图：<br><br><img src="Gaia-Ui-Tests/marionette-basic-diagram.png" alt="Marionette结构"></li>
<li>安装Marionette模块<ul>
<li>pip install marionette_client</li>
</ul>
</li>
</ul>
<h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><ul>
<li>启动FireFox</li>
<li>按Shift+F8启动WebIDE（或者通过菜单启动Web Devloaper-WebIDE）<br><img src="Gaia-Ui-Tests/web_devloaper.png" alt="Web Developer"><br><img src="Gaia-Ui-Tests/WebIDE_in_menu.png" alt="WebIDE"><br></li>
<li>安装Adb Helper<br><img src="Gaia-Ui-Tests/adb_helper.png" alt="Adb Helper"></li>
<li>安装模拟器镜像(安装之后如下图）<br><img src="Gaia-Ui-Tests/Simulator.png" alt="Simulator"></li>
</ul>
<ul>
<li>启动模拟器<br><br><img src="Gaia-Ui-Tests/start_sim.png" alt="启动模拟器"><br><br><img src="Gaia-Ui-Tests/simulator_ui.png" alt="模拟器启动界面"></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Automated_testing/gaia-ui-tests/Part_1_Marionette_Firefox_OS_start" target="_blank" rel="external">Part_1_Marionette_Firefox_OS_start</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gaiatest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据驱动在Uiautomator中的使用]]></title>
      <url>/posts/2017/eeb82703/</url>
      <content type="html"><![CDATA[<h1 id="Part-1-前言"><a href="#Part-1-前言" class="headerlink" title="Part 1: 前言"></a>Part 1: 前言</h1><p>&emsp;&emsp;本文的基础是Junit4的参数化，如果不了解请阅读或百度<a href="https://www.baidu.com/s?wd=Junit+4+%E5%8F%82%E6%95%B0%E5%8C%96&amp;ie=utf-8&amp;rsv_op=JV8ML2UfIadPaYb8P23XbMUJhTOc35bcZ680SQN4dYOUIMKL2SK86J6fRVheQ7P6UW3dRO0e9gIIJah65df8Q3hQONeZLIaW&amp;tn=90909841_hao_pg&amp;ch=&amp;rsv_su=4cI4IQXZ7ZQQ7LgTe8IQKafQf0dO5e9e0fg1O0S1II61c8V71WKTXIVSUa9dbf1XeRh0eKNIXL6hSeaf0TaeSQOfJTd0NeVZ" target="_blank" rel="external">Junit4参数化</a><br></p>
<h1 id="Part-2：-理论依据"><a href="#Part-2：-理论依据" class="headerlink" title="Part 2： 理论依据"></a>Part 2： 理论依据</h1><p>&emsp;&emsp;数据驱动的设计思路是，把需要的数据放到excel表格中，然后由程序去读里面的数据，传入程序里进行测试。因此涉及到了两个方面：<br><br><a id="more"></a></p>
<ul>
<li>数据读取</li>
<li>数据分配<br><br>&emsp;&emsp;在数据分配上由于Junit已经实现了，因此只需要把数据读到程序里，形成一个collocation即可。这里需要用到<a href="https://poi.apache.org/" target="_blank" rel="external">POI</a>,使用POI来进行读取Excel的操作。</li>
</ul>
<h1 id="Part-3：实现步骤"><a href="#Part-3：实现步骤" class="headerlink" title="Part 3：实现步骤"></a>Part 3：实现步骤</h1><h2 id="在AS中添加POI的依赖"><a href="#在AS中添加POI的依赖" class="headerlink" title="在AS中添加POI的依赖:"></a>在AS中添加POI的依赖:</h2><p>依赖添加步骤：<br><br>在要添加的jar文件上点击右键，然后选择在弹出菜单中选择Add As Library如下图：<br><br> <img src="Data-Driven-Test-In-Uiautomator/addlibs.png" alt="添加依赖"><br><br>或者直接在build.gradle(App下那个）中的dependencies里添加jar的路劲如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile files(&apos;src/libs/poi-3.17-beta1.jar&apos;)</div></pre></td></tr></table></figure></p>
<h2 id="使用POI读取Excel"><a href="#使用POI读取Excel" class="headerlink" title="使用POI读取Excel"></a>使用POI读取Excel</h2><p>&emsp;&emsp;读取Excel步骤分析：</p>
<ul>
<li>拿到excel表格</li>
<li>拿到表格里的sheet</li>
<li>拿到行和列</li>
<li>拿到单元格数量</li>
<li>判断单元格里的内容并读取。</li>
</ul>
<h1 id="Part-3-代码实现"><a href="#Part-3-代码实现" class="headerlink" title="Part 3 代码实现"></a>Part 3 代码实现</h1><h2 id="读取Excel部分"><a href="#读取Excel部分" class="headerlink" title="读取Excel部分"></a>读取Excel部分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//从文件流中读取sheet里的信息，并放到一个Object数组里</div><div class="line">    private Collection&lt;Object[]&gt; readExcelData(final InputStream excelFile)</div><div class="line">            throws IOException &#123;</div><div class="line">        //新建一个Excel工作簿文件</div><div class="line">        HSSFWorkbook workbook = new HSSFWorkbook(excelFile);</div><div class="line"></div><div class="line">        //用来存放行、列、单元格里的数据</div><div class="line">        data = new ArrayList&lt;Object[]&gt;();</div><div class="line">        //获取第一个sheet</div><div class="line">        Sheet sheet = workbook.getSheetAt(0);</div><div class="line">        //统计sheet里不为空的行</div><div class="line">        int numberOfColumns = countNonEmptyColumns(sheet);</div><div class="line">        //新建两个数组用来存放列和列里面的数据</div><div class="line">        List&lt;Object[]&gt; rows = new ArrayList&lt;Object[]&gt;();</div><div class="line">        List&lt;Object&gt; rowData = new ArrayList&lt;Object&gt;();</div><div class="line">        int rowNum = sheet.getPhysicalNumberOfRows();</div><div class="line">        //遍历解析sheet里的数据</div><div class="line">        //  for (Row row : sheet) &#123;</div><div class="line">        for (int i = 1; i &lt; rowNum; i++) &#123;</div><div class="line">            //如果row里的为空，则退出循环</div><div class="line">            Row row = sheet.getRow(i);</div><div class="line">            if (isEmpty(row)) &#123;</div><div class="line">                break;</div><div class="line">            &#125; else &#123;</div><div class="line">                rowData.clear();</div><div class="line">                //循环遍历所有列</div><div class="line">                for (int column = 1; column &lt; numberOfColumns; column++) &#123;</div><div class="line">                    //读取所有列里的内容</div><div class="line">                    Cell cell = row.getCell(column);</div><div class="line"></div><div class="line">                    rowData.add(cellFormatCheck(workbook, cell));</div><div class="line">                &#125;</div><div class="line">                rows.add(rowData.toArray());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return rows;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="单元格判断"><a href="#单元格判断" class="headerlink" title="单元格判断"></a>单元格判断</h2><p>&emsp;&emsp;在读取单元格里内容时，需要先判断单元格里值的类型。然后根据不同类型在分别读取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//判断Row的内容是否为空</div><div class="line"> private boolean isEmpty(final Row row) &#123;</div><div class="line">        Cell firstCell = row.getCell(0);</div><div class="line">        boolean rowIsEmpty = (firstCell == null)</div><div class="line">                || (firstCell.getCellTypeEnum() == CellType.BLANK);</div><div class="line">        return rowIsEmpty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">/*判断单元格里的公式类型</div><div class="line">如=SUM(A1:E1*&#123;1,2,3,4,5&#125;</div><div class="line">*/</div><div class="line">    private Object evaluateCellFormula(final HSSFWorkbook workbook, final Cell cell) &#123;</div><div class="line">        FormulaEvaluator evaluator = workbook.getCreationHelper()</div><div class="line">                .createFormulaEvaluator();</div><div class="line">        CellValue cellValue = evaluator.evaluate(cell);</div><div class="line">        Object result = null;</div><div class="line"></div><div class="line">        if (cellValue.getCellTypeEnum() == CellType.BOOLEAN) &#123;</div><div class="line">            result = cellValue.getBooleanValue();</div><div class="line">        &#125; else if (cellValue.getCellTypeEnum() == CellType.NUMERIC) &#123;</div><div class="line">            result = cellValue.getNumberValue();</div><div class="line">        &#125; else if (cellValue.getCellTypeEnum() == CellType.STRING) &#123;</div><div class="line">            result = cellValue.getStringValue();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">/*</div><div class="line">     * 判断不为空的行数，通过第一行的不为空的单元格</div><div class="line">     */</div><div class="line">    private int countNonEmptyColumns(final Sheet sheet) &#123;</div><div class="line">        Row firstRow = sheet.getRow(0);</div><div class="line">        return firstEmptyCellPosition(firstRow);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">    获取第一行不为空的单元格数量</div><div class="line">     */</div><div class="line">    private int firstEmptyCellPosition(final Row cells) &#123;</div><div class="line">        int columnCount = 0;</div><div class="line">        for (Cell cell : cells) &#123;</div><div class="line">            if (cell.getCellTypeEnum() == CellType.BLANK) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            columnCount++;</div><div class="line">        &#125;</div><div class="line">        return columnCount;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="读取单元格里的值"><a href="#读取单元格里的值" class="headerlink" title="读取单元格里的值"></a>读取单元格里的值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">private Object cellFormatCheck(final HSSFWorkbook workbook, final Cell cell) &#123;</div><div class="line">        Object cellValue = null;</div><div class="line">        //判断对应cell（单元格）的值，并读取出来。</div><div class="line">        if (cell.getCellTypeEnum() == CellType.STRING) &#123;</div><div class="line">            cellValue = cell.getRichStringCellValue().getString();</div><div class="line">        &#125; else if (cell.getCellTypeEnum() == CellType.NUMERIC) &#123;</div><div class="line">            cellValue = getNumericCellValue(cell);</div><div class="line">        &#125; else if (cell.getCellTypeEnum() == CellType.BOOLEAN) &#123;</div><div class="line">            cellValue = cell.getBooleanCellValue();</div><div class="line">        &#125; else if (cell.getCellTypeEnum() == CellType.FORMULA) &#123;</div><div class="line">            cellValue = evaluateCellFormula(workbook, cell);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return cellValue;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">//从单元格中读取数字的值</div><div class="line">    private Object getNumericCellValue(final Cell cell) &#123;</div><div class="line">        Object cellValue;</div><div class="line">        if (DateUtil.isCellDateFormatted(cell)) &#123;</div><div class="line">            cellValue = new Date(cell.getDateCellValue().getTime());</div><div class="line">        &#125; else &#123;</div><div class="line">            cellValue = cell.getNumericCellValue();</div><div class="line">        &#125;</div><div class="line">        return cellValue;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="获取读取到的数据并返回"><a href="#获取读取到的数据并返回" class="headerlink" title="获取读取到的数据并返回"></a>获取读取到的数据并返回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 从传入的文件流里读取excel内容，并放到data集合数组里。</div><div class="line"></div><div class="line">    public ExcelReader(final InputStream excelInputStream) throws IOException &#123;</div><div class="line">        this.data = readExcelData(excelInputStream);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // put the data in collection and return the data.</div><div class="line">    public Collection&lt;Object[]&gt; getData() &#123;</div><div class="line">        return data;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="在测试中的使用"><a href="#在测试中的使用" class="headerlink" title="在测试中的使用"></a>在测试中的使用</h2><h3 id="定义数据源"><a href="#定义数据源" class="headerlink" title="定义数据源"></a>定义数据源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Parameterized.Parameters</div><div class="line">    public static Collection testDataSource() throws IOException &#123;</div><div class="line">        InputStream excelURL = new FileInputStream(Environment.getExternalStorageDirectory() + &quot;/1.xls&quot;);</div><div class="line">        return new ExcelReader(excelURL).getData();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="使用构建参数用于数据传递"><a href="#使用构建参数用于数据传递" class="headerlink" title="使用构建参数用于数据传递"></a>使用构建参数用于数据传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private String appName;</div><div class="line">   private String appPackage;</div><div class="line"></div><div class="line">   /*</div><div class="line">   在构建方法里指定参数的对应关系</div><div class="line">    */</div><div class="line">   public DataDrivenTestCase(String target, String result) &#123;</div><div class="line"></div><div class="line">       this.appName = target;</div><div class="line">       this.appPackage = result;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line"> public void OpenAppFormList() &#123;</div><div class="line">     try &#123;</div><div class="line">         DemoTools.isClickByDesc(&quot;Apps&quot;);</div><div class="line">         UiScrollable uiScrollable = new UiScrollable(new UiSelector().resourceId(&quot;com.android.launcher3:id/apps_customize_pane_content&quot;));</div><div class="line">         if (DemoTools.getUiDevice().wait(Until.hasObject(By.res(&quot;com.android.launcher3:id/active&quot;)), 5000)) &#123;</div><div class="line">             uiScrollable.setAsHorizontalList();</div><div class="line">             if (uiScrollable.scrollTextIntoView(appName)) &#123;</div><div class="line">                 DemoTools.isClickByText(appName);</div><div class="line">                 Thread.sleep(1000);</div><div class="line">                 Assert.assertTrue(&quot;Test Fail,Package does not match!&quot;, DemoTools.getCurrentPackageName().equals(appPackage));</div><div class="line">             &#125; else &#123;</div><div class="line">                 fail(&quot;The Target Object &quot; + appName + &quot; Not Found!&quot;);</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line"></div><div class="line"></div><div class="line">     &#125; catch (UiObjectNotFoundException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">         Log.i(&quot;BlogDemo&quot;, e.toString());</div><div class="line">     &#125; catch (InterruptedException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h1 id="Part-4-总结"><a href="#Part-4-总结" class="headerlink" title="Part 4 总结"></a>Part 4 总结</h1><ul>
<li>构建参数里的参数个数要和表格里给出的列数一致，不然会报参数错误，如图：<br><img src="Data-Driven-Test-In-Uiautomator/grguments_error_20170902163324.png" alt="参数错误"></li>
<li>参数会到该类里所有测试方法都起作用。因此即使在有的测试用例里，没用到相关数据，case依然会执行多次（按数据条数计）</li>
<li>本次的难点在于，从excel里读取数据，然后返回成Junit4要求的格式，折腾了好久，终于搞定。不容易啊</li>
<li>记得添加读取存储的权限哦！</li>
</ul>
<h2 id="示例和资料"><a href="#示例和资料" class="headerlink" title="示例和资料"></a>示例和资料</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/RoryShen/Blog/tree/DataDriven" target="_blank" rel="external">本次示例</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://poi.apache.org/spreadsheet/quick-guide.html#NewWorkbook" target="_blank" rel="external">Busy Developers’ Guide to HSSF and XSSF Features</a><br><br><a href="https://dzone.com/articles/data-driven-tests-junit-4-and" target="_blank" rel="external">Data-driven tests With JUnit 4 and Excel</a><br><br><a href="https://github.com/junit-team/junit4/wiki/Parameterized-tests" target="_blank" rel="external">Parameterized-tests</a><br></p>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Junit </tag>
            
            <tag> Uiautomator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于世界咖啡的时间管理]]></title>
      <url>/posts/2017/98f089c5/</url>
      <content type="html"><![CDATA[<h1 id="Part-1-我们真的怕时间浪费么？"><a href="#Part-1-我们真的怕时间浪费么？" class="headerlink" title="Part 1 我们真的怕时间浪费么？"></a>Part 1 我们真的怕时间浪费么？</h1><h2 id="时间的消逝，是我们最期待的事情"><a href="#时间的消逝，是我们最期待的事情" class="headerlink" title="时间的消逝，是我们最期待的事情"></a>时间的消逝，是我们最期待的事情</h2><p>&emsp;&emsp;举例说明：比如我们会玩游戏来打发时间，在无聊的时候，总希望时间能够快一点过去。在快要下班的时候，总希望时间可以快点消逝，能够很快的到达下班时刻，特别是大型节假日，或者是周五快要下班的时候。<br><br>&emsp;&emsp;所以可以得出一个简单粗暴的结论：我们并不是那么的珍惜时间，我们痛苦的根源在于 <code>时间消逝之后，我们需要做的事情没有完成。</code> 因此我们会时常感叹，自己时间不够用，需要进行时间管理，所以这才是我们提出的需要对时间进行管理的出发点。那么该怎么要进行时间管理呢？我们需要做到以下几点：<br><a id="more"></a></p>
<ul>
<li>在时间结束之前完成改变</li>
<li>在时间结束之前结束任务</li>
<li>在时间结束之前达成目标</li>
</ul>
<h1 id="Part-2-浪费时间的特点"><a href="#Part-2-浪费时间的特点" class="headerlink" title="Part 2 浪费时间的特点"></a>Part 2 浪费时间的特点</h1><p>&emsp;&emsp;浪费时间都具备哪些特点呢？或者可以从以下角度进行分析：</p>
<ul>
<li>穷于应付，没有轻重缓急<ul>
<li>胡子眉毛一把抓，一锅炖。撒也做不好</li>
</ul>
</li>
<li>只要没有偷懒就心安理得<ul>
<li>给自己安排很多事情，把自己搞的身心疲惫，很累，然后就安慰自己，我已经很努力了。我已经尽力了。殊不知自己在做无用功。</li>
</ul>
</li>
<li>没有可以自己可支配的自由时间<ul>
<li>把自己行程排的满满的。想干点自己想干的事，都很难抽出时间</li>
</ul>
</li>
<li>凡事必须亲为，分身乏术<ul>
<li>不放心下属的工作，担心下属工作容易出问题，凡事爱亲力亲为，搞的自己精疲力尽。</li>
</ul>
</li>
</ul>
<h1 id="Part-3-自我检查，对症下药"><a href="#Part-3-自我检查，对症下药" class="headerlink" title="Part 3 自我检查，对症下药"></a>Part 3 自我检查，对症下药</h1><p>&emsp;&emsp;如果出现以下情况，那么你就需要进行对时间进行管理了</p>
<ul>
<li>很难说清楚自己当天做了什么，只是感觉自己一天都没空。忙个不停。</li>
<li>碰到了一个自己没办法在继续拖延的事情，必须要处理了</li>
<li>做了实际上不需要自己处理的事。</li>
<li>常常帮下属处理事情，帮他们做应该由他们完成的事</li>
</ul>
<h1 id="Part-4-如何让自己成为高手"><a href="#Part-4-如何让自己成为高手" class="headerlink" title="Part 4 如何让自己成为高手"></a>Part 4 如何让自己成为高手</h1><p>&emsp;&emsp;如何让自己能够成为高手，可以控制好自己，让自己能够在时间结束之前把自己需要做的事情可以做完。让自己避免陷入时间不够用，分身乏术的尴尬境地？</p>
<h2 id="一万小时定律？"><a href="#一万小时定律？" class="headerlink" title="一万小时定律？"></a>一万小时定律？</h2><p>&emsp;&emsp;研究表明，人在一件事上所耗费的时间超过1万小时，那么他将成为这件事的高手。但这里其实有一个陷阱，怎么样的时间才算是有效的时间？举个例子，我们每天都在走路，那么我们能够比得过专业运动员么？我们每天都在吃饭，我们是吃饭的高手，或者说是美食专家了么？<br>&emsp;&emsp;之所以我们没有成为高手，并不是我们所花的时间不够，而是我们曲解了1万小时里的定义，针对1万小时定律，或许我们可以这样说，在一件事情上，所花费的练习的时间超过1万小时，那么你将变成高手。没错，我们需要不断的练习，才能够成为高手，如果只是花时间，不做任何思考，那么距离高手之路也还有很长一段路要走。<br>&emsp;&emsp;我们可以把事情分为几个阶段或者几个区域：</p>
<ul>
<li>我们做起来得心应手，毫无困难，我们对这部分的事情做起来非常的熟悉，因此我们也乐于做这一部分的事情，这部分事情我们做起来感觉很舒服（简单啊）因此我们可以认为这一部分内容是我们的舒适区，是我们的特长点</li>
<li>有那么一部分事情，我们会一些，但有很多内容不会，不知道，需要学习，对于这一部分内容，我们会硬着头皮去做，但肯定不会主动想做这部分内容，这一部分内容我们把他叫做学习区。</li>
<li>那么在工作中还有一部分内容，我们提起来就头大，一点都不想碰，那么这一部分内容就是我们的恐惧区。<br><br><br>&emsp;&emsp;如果想成为某一领域的专家，那么我们需要不断的挑战自己的学习区，把学习区里的内容变成自己的舒适区，这样随着舒适区的范围不断扩大，我们也就慢慢的成为了某个领域的高手咯。（三个区的关系见下图）<br><img src="http://ww3.sinaimg.cn/large/6fcc8c71gy1fiy713q4i1j20jc0h0wet.jpg" alt="学习区"><h2 id="成为高手的小技巧"><a href="#成为高手的小技巧" class="headerlink" title="成为高手的小技巧"></a>成为高手的小技巧</h2></li>
<li>不允许自动完成，要时刻的可以练习思考，要时刻总结自己做的好与不好的地方。</li>
<li>时刻总结，寻找自己的学习区。</li>
<li>对于细节要不断重复的练习与纠正不断的提高与完善自己。</li>
</ul>
<h1 id="Part-5-拖延症管理"><a href="#Part-5-拖延症管理" class="headerlink" title="Part 5 拖延症管理"></a>Part 5 拖延症管理</h1><h2 id="拖延症分析"><a href="#拖延症分析" class="headerlink" title="拖延症分析"></a>拖延症分析</h2><p>&emsp;&emsp;为什么会有拖延症产生？<br>&emsp;&emsp;拖延症是由于基因决定的，来源于人性，动物本能。因此很难克服。如果想要克服拖延症，只有通过人性来克服拖延症，下面是是克服拖延症的两个方法.</p>
<h2 id="管理拖延症的两个小工具"><a href="#管理拖延症的两个小工具" class="headerlink" title="管理拖延症的两个小工具"></a>管理拖延症的两个小工具</h2><ul>
<li>番茄工作法</li>
<li>瓜子法<h3 id="番茄工作法"><a href="#番茄工作法" class="headerlink" title="番茄工作法"></a>番茄工作法</h3>&emsp;&emsp;这里不介绍番茄发的原理，需要补充的是，增加仪式感，让自己潜意识里重视这件事。比如买一个番茄计时器，或者买一个沙漏。让整个过程变得更加郑重，通过仪式感来让自己坚持下来。<h3 id="瓜子法"><a href="#瓜子法" class="headerlink" title="瓜子法"></a>瓜子法</h3>&emsp;&emsp;瓜子法的核心在于及时奖级，比如发现下属做的好，要及时给与正面的反馈，发现孩子做的好的，要及时给与正面反馈。简单总结下，瓜子法的核心步骤如下:简单重复–立刻激励–成果可见<h3 id="如何利用瓜子法"><a href="#如何利用瓜子法" class="headerlink" title="如何利用瓜子法"></a>如何利用瓜子法</h3></li>
<li>给自己定不设定语的目标</li>
<li>立刻激励反馈</li>
<li>让周围朋友讨论这件事（引导别人，让成果可见)</li>
</ul>
<h1 id="Part-6-时间压力解决办法"><a href="#Part-6-时间压力解决办法" class="headerlink" title="Part 6 时间压力解决办法"></a>Part 6 时间压力解决办法</h1><h2 id="PDCA-四部曲"><a href="#PDCA-四部曲" class="headerlink" title="PDCA 四部曲"></a>PDCA 四部曲</h2><ul>
<li>Plan</li>
<li>Do</li>
<li>Check</li>
<li>Act<br><img src="http://ww2.sinaimg.cn/large/6fcc8c71gy1fiy8mvsr7jj21ek12i4qp.jpg" alt="PDCA"></li>
</ul>
<h2 id="工作四象限"><a href="#工作四象限" class="headerlink" title="工作四象限"></a>工作四象限</h2><p><img src="http://ww3.sinaimg.cn/large/6fcc8c71gy1fiy8w7tg8pj20je0h7wes.jpg" alt="四象限"><br><br>&emsp;&emsp;我们应当把经历放在不紧急且重要的事情上</p>
<h3 id="四象限补充分析"><a href="#四象限补充分析" class="headerlink" title="四象限补充分析"></a>四象限补充分析</h3><p><img src="http://ww2.sinaimg.cn/large/6fcc8c71gy1fiy91vic2ij20jh0h8gmd.jpg" alt="四象限分析"></p>
<h3 id="要制定合理的计划"><a href="#要制定合理的计划" class="headerlink" title="要制定合理的计划"></a>要制定合理的计划</h3><p>&emsp;&emsp;在制定计划时，要使用SMART的原则，时计划具有可行性。<br></p>
<ul>
<li>S Spectific— 具体的</li>
<li>M Measurable–可量化的</li>
<li>A Attainable—能否达到</li>
<li>R Realistic—实际的</li>
<li>T Time bound—时限性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Manage </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Traning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[参数化在UiAutomator中的使用]]></title>
      <url>/posts/2017/2799a829/</url>
      <content type="html"><![CDATA[<h1 id="Part-1：-背景"><a href="#Part-1：-背景" class="headerlink" title="Part 1： 背景"></a>Part 1： 背景</h1><p>自动化在部门内部推行了大半年时间，由于电话号码，邮件账户等信息希望能够实现从外部读取，并使用，避免使用同一组数据，也为了让脚本更加利于维护，因此部门内部提出了把测试数据分离的观点。</p>
<a id="more"></a>
<h1 id="Part-2：-思路"><a href="#Part-2：-思路" class="headerlink" title="Part 2： 思路"></a>Part 2： 思路</h1><p>&emsp;&emsp; 刚开始的时候，想的是把文本里的文件用IO流读进来，然后在进行分配，但问题就来了，读取数据简单，但怎么分配成了一个难题。后来通过查资料得知，Junti4已经实现了该功能，使用Parameters即可。<br></p>
<p>&emsp;&emsp;核心步骤如下：</p>
<ul>
<li>更改运行器为Parameterized.class</li>
<li>定义数据源，使用@Parameters进行标记，注意返回类型为Collection或者是数组</li>
<li>创建一个带参数的构造方法，用来进行参数的分配。</li>
</ul>
<h1 id="Part-3-代码实现"><a href="#Part-3-代码实现" class="headerlink" title="Part 3 代码实现"></a>Part 3 代码实现</h1><h2 id="标记运行器"><a href="#标记运行器" class="headerlink" title="标记运行器"></a>标记运行器</h2><p>&emsp;&emsp;定义用来运行的运行器</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@RunWith(Parameterized.class)</div><div class="line">public class Pa &#123;</div><div class="line">....</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定义数据池"><a href="#定义数据池" class="headerlink" title="定义数据池"></a>定义数据池</h2><p>&emsp;&emsp;Junit会读取数组里的内容，如果是单个数据可以定义为一个数组，如果需要从外部读取，则把读取的数据按照格式进行保存即可</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Parameterized.Parameters</div><div class="line">   public static Collection&lt;Object[]&gt; appname() &#123;</div><div class="line"></div><div class="line">       return Arrays.asList(new Object[][]&#123;</div><div class="line">               &#123;&quot;电话&quot;, &quot;com.android.dialer&quot;&#125;, &#123;&quot;电子邮件&quot;, &quot;com.android.email&quot;&#125;, &#123;&quot;短信&quot;, &quot;com.android.dialer&quot;&#125;</div><div class="line">       &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="定义构造方法"><a href="#定义构造方法" class="headerlink" title="定义构造方法"></a>定义构造方法</h2><p>&emsp;&emsp; 主要是用来制定读取到的参数怎么在程序内部使用,需要几个参数则传递几个参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    //定义传参名字</div><div class="line">    private String target;</div><div class="line">    private String result;</div><div class="line">//   用到几个参数，则这里需要定义几个参数哦</div><div class="line"></div><div class="line">    public Pa(String a, String b) &#123;</div><div class="line">        target = a;</div><div class="line">        result = b;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>或者使用@Parameter来替代构造参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//如果使用parameter来进行标注，那么必须指定为Public</div><div class="line">@Parameter//如果不加则默认为第一个元素即，下标为0</div><div class="line">public String target;</div><div class="line">@Parameter（1）</div><div class="line">public String result;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">    public void openapp() throws InterruptedException, UiObjectNotFoundException &#123;</div><div class="line">        UiDevice mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());</div><div class="line">        PackageManager packageManager = InstrumentationRegistry.getTargetContext().getPackageManager();</div><div class="line"></div><div class="line">        mDevice.findObject(new UiSelector().description(&quot;应用&quot;)).click();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        mDevice.findObject(new UiSelector().text(target)).click();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        String curentPackageName = mDevice.getCurrentPackageName();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        System.out.println(&quot;ABS&quot; + curentPackageName);</div><div class="line">        Assert.assertEquals(&quot;Test Fail,The Package info not match!&quot;, result, curentPackageName);</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="Part-4-完整例子"><a href="#Part-4-完整例子" class="headerlink" title="Part 4 完整例子"></a>Part 4 完整例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@RunWith(Parameterized.class)</div><div class="line">public class Pa &#123;</div><div class="line">    //定义数据源</div><div class="line">    @Parameterized.Parameters</div><div class="line">    public static Collection&lt;Object[]&gt; appname() &#123;</div><div class="line">//根据需要定义参数的个数</div><div class="line">        return Arrays.asList(new Object[][]&#123;</div><div class="line">                &#123;&quot;电话&quot;, &quot;com.android.dialer&quot;,&#125;, &#123;&quot;电子邮件&quot;, &quot;com.android.email&quot;&#125;, &#123;&quot;短信&quot;, &quot;com.android.dialer&quot;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //定义传参名字</div><div class="line"></div><div class="line">    private String target;</div><div class="line">    private String result;</div><div class="line"></div><div class="line"></div><div class="line">//定义参数的传递方式，这里是用到了两个参数</div><div class="line">    public Pa(String a, String b) &#123;</div><div class="line">        target = a;</div><div class="line">        result = b;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">//运行的例子</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void openapp() throws InterruptedException, UiObjectNotFoundException &#123;</div><div class="line">        UiDevice mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());</div><div class="line">        PackageManager packageManager = InstrumentationRegistry.getTargetContext().getPackageManager();</div><div class="line"></div><div class="line">        mDevice.findObject(new UiSelector().description(&quot;应用&quot;)).click();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        mDevice.findObject(new UiSelector().text(target)).click();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        String curentPackageName = mDevice.getCurrentPackageName();</div><div class="line">        Thread.sleep(1000);</div><div class="line">        System.out.println(&quot;ABS&quot; + curentPackageName);</div><div class="line">        Assert.assertEquals(&quot;Test Fail,The Package info not match!&quot;, result, curentPackageName);</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line">        mDevice.pressBack();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Junit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android git文件过滤设置]]></title>
      <url>/posts/2017/9e96eb51/</url>
      <content type="html"><![CDATA[<p>如下是记录关于Android项目，使用git管理时的gitinore文件过滤设置以及操作步骤</p>
<ul>
<li>新建一个空白的仓库</li>
<li>在空白仓库里新建项目</li>
<li>设置gitignore文件</li>
<li><p>对于Android项目仅需要保留以下目录</p>
<ul>
<li>app</li>
<li>build.gradle</li>
<li>settings.gradle<a id="more"></a>
</li>
</ul>
<p>整体结果如下：<br><img src="http://ww1.sinaimg.cn/large/6fcc8c71gy1fio63bpblsj20gy038mx4.jpg" alt="Project folder"><br><img src="http://ww1.sinaimg.cn/large/6fcc8c71gy1fio64b6f70j20gm02pdfp.jpg" alt="App Folder"></p>
<ul>
<li>在app目录下也添加.gitignore文件<br>.gitignore 文件配置如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"> *.iml</div><div class="line">.gradle</div><div class="line">/local.properties</div><div class="line">/.idea/workspace.xml</div><div class="line">/.idea/libraries</div><div class="line">.DS_Store</div><div class="line">/build</div><div class="line">/captures</div><div class="line">.externalNativeBuild</div><div class="line"># Built application files</div><div class="line">*.apk</div><div class="line">*.ap_</div><div class="line"></div><div class="line"># Files for the ART/Dalvik VM</div><div class="line">*.dex</div><div class="line"></div><div class="line"># Java class files</div><div class="line">*.class</div><div class="line"></div><div class="line"># Generated files</div><div class="line">bin/</div><div class="line">gen/</div><div class="line">out/</div><div class="line"></div><div class="line"># Gradle files</div><div class="line">.gradle/</div><div class="line">build/</div><div class="line">gradlew.bat</div><div class="line">gradle.properties</div><div class="line">gradlew</div><div class="line">gradle/</div><div class="line"></div><div class="line"></div><div class="line"># Local configuration file (sdk path, etc)</div><div class="line">local.properties</div><div class="line"></div><div class="line"># Proguard folder generated by Eclipse</div><div class="line">proguard/</div><div class="line"></div><div class="line"># Log Files</div><div class="line">*.log</div><div class="line"></div><div class="line"># Android Studio Navigation editor temp files</div><div class="line">.navigation/</div><div class="line"></div><div class="line"># Android Studio captures folder</div><div class="line">captures/</div><div class="line"></div><div class="line"># Intellij</div><div class="line">*.iml</div><div class="line">.idea/workspace.xml</div><div class="line">.idea/tasks.xml</div><div class="line">.idea/gradle.xml</div><div class="line">.idea/dictionaries</div><div class="line">.idea/libraries</div><div class="line">.idea</div><div class="line"></div><div class="line"># Keystore files</div><div class="line">*.jks</div><div class="line"></div><div class="line"># External native build folder generated in Android Studio 2.2 and later</div><div class="line">.externalNativeBuild</div><div class="line"></div><div class="line"># Google Services (e.g. APIs or Firebase)</div><div class="line">google-services.json</div><div class="line"></div><div class="line"># Freeline</div><div class="line">freeline.py</div><div class="line">freeline/</div><div class="line">freeline_project_description.json</div></pre></td></tr></table></figure>
</li>
<li><p>重新导入项目时，AS就会自动生成所需要的文件。</p>
<ul>
<li>在导入或打开文件，看到询问是否是否配置gradle时选yes(提示信息如下：）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> Gradle settings for this project are not configured yet.</div><div class="line"></div><div class="line">Would you like the project to use the Gradle wrapper?</div><div class="line">(The wrapper will automatically download the latest supported Gradle version).</div><div class="line"></div><div class="line">Click &apos;OK&apos; to use the Gradle wrapper, or &apos;Cancel&apos; to manually set the path of a local Gradle distribution.</div></pre></td></tr></table></figure>
<p> <img src="http://ww3.sinaimg.cn/large/6fcc8c71gy1fio5w0d0cyj20hi05o0tc.jpg" alt="重新配置Gradle"></p>
]]></content>
      
        <categories>
            
            <category> Dev </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么Junit的@Test方法必须是public的呢？]]></title>
      <url>/posts/2017/3bf7c79e/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;最近有部门内部再次推广自动化，有同学问我，为什么@Test方法需要必须是public void开头呢？我用其他方法可行不？<br>&emsp;&emsp;通过分析错误信息和源码发现，在junit测试里定义明确要求@Test方法必须是以public void开头。说明如下：<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">The Test annotation tells JUnit that the public void method</div><div class="line">to which it is attached can be run as a test case. To run the method,</div><div class="line">JUnit first constructs a fresh instance of the class then invokes the</div><div class="line">annotated method. Any exceptions thrown by the test will be reported</div><div class="line">by JUnit as a failure. If no exceptions are thrown, the test is assumed</div><div class="line">to have succeeded.</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;原因是，Junit方法会对标注了@Test的创建实例，然后去执行它们，由于Java的安全机制，因此只有把测试方法设置为public的才能够被Junit框架访问，所以测试用例也就是以public开头的咯！<br><br>&emsp;&emsp;至于为什么返回值是Void，我的理解是，测试框架不好对返回值进行处理，就干脆要求为空了。<br><br>附：java 四种修饰符和作用范围：<br><img src="http://ww2.sinaimg.cn/large/6fcc8c71gy1fimntucsazj20zj0d00vi.jpg" alt="java访问控制"></p>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Junit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[九型人格-职场高效沟通]]></title>
      <url>/posts/2017/5d24c2f9/</url>
      <content type="html"><![CDATA[<p> 上周五去参加了智联的公开课，九型人格-职场高效沟通，会上老师讲了很多，关于人性格分析的内容。<br>&emsp;&emsp;通过学习九型人格，可以让自己在工作中更好的和同事沟通与交流。用老师的话来说，九型人格的作用就是用来交朋友。<br>&emsp;&emsp;有历史学家认为九型人格最早出现在西元10-11世纪的伊斯兰生米主义教派“苏菲教”的某些加哦团中，也有国外学者和科学家们指出，在古埃及便已经发现了九型人格的核心理论。<br>&emsp;&emsp;九型人格的英文Enneagram，来自两个希腊词ennea与gram。其中ennea代表数值9，gram代表图形，所以我们也可以把它叫做九柱图，九星图，九点图等。当然九型人格和我们熟悉的星座，生肖，五行并不相同，九型人格更多的是心理学的范畴。通过学习九型人格，我们可以看到人的本质，帮助我们跳出性格的框框，找到解决问题的方法。<br><a id="more"></a><br>&emsp;&emsp;著名心理学家佛洛伊德认为，人类性格分为“本我、自我、超我”九型人格也契合这个观点。通过学习九型人格，你可以更好的了解自己，掌握自己的性格地图。在九型人格里更多的是研究性格本我的学科。在九型人格中的人格是指心理学上的性格。<br><br>&emsp;&emsp;心理学上认为“性格”更多的是指本质或者本我层面，更多的是在表达一个人内在的核心动机、感受等，而形态是指面具，更多的是指后天的经历，环境或某些事件影响，而出现的言行、习惯，爱好等。即:性格，不易改变，形态，可以改变。<br><br>&emsp;&emsp;型态更多时候是指我们的言行、习惯、处事方式，而性格则决定了我们的动机、感受、气质。在九型人格的培训中，老师带领我着我们去挖掘型态背后的东西。<br><br>&emsp;&emsp;在培训过程中，老师提出，不要记性格的名字，而是要记住他们的代号。<br>&emsp;&emsp;9种性格他们分别是：</p>
<ul>
<li>1号：正义性；</li>
<li>2号：爱心型；</li>
<li>3号：精英型；</li>
<li>4号：艺术型；</li>
<li>5号：智慧型；</li>
<li>6号：忠诚型；</li>
<li>7号：多面型；</li>
<li>8号：指导型；</li>
<li>9号：和谐型。<br></li>
</ul>
<p>&emsp;&emsp;通过学习九型人格，让我明白了。我们在和人交流的时候，要注意对方的性格，针对不同的人要采取不同的说话技巧。这样可以更好的实现更好的沟通效果。在日常管理工作中，我们也可以根据员工的性格特性，采取不同的谈话方式，比如，对于3号性格的同学，可以采取激将法，告诉他们怎么样可以达到目的，因为3号性格的员工属于好胜心强，具有积极进取，他们善于给自己设定目标和决策，因此对于此类员工，根据他们性格特点，采取对应的谈话方式，可以达到事半功倍的效果。比如可以告诉他们，这个很难，你如果有困难，做不到，也没关系，激发他的好胜心。<br><br>&emsp;&emsp;比如我们团队里有一位疑似4号性格的同学（下称A同学），平时在群里说话，聊天，或者是开会，很平常的一句话，在A同学开来，都会有额外的意思，容易激动，转牛角尖。容易对事情产生误解。<br><br>&emsp;&emsp;还有一位8号性格的同学，那简直了，和他谈话简直是在吵架，很强势，很霸道。说话不太注意，有时候得罪了人还不自知。<br><br>&emsp;&emsp;还有一个感受就是，性格不代表品行，更不代表品格，比如6号性格的同学，也可以做出不靠谱的事。人都是多变的，因此我们在判断一个人属于几号性格的时候，不能以一条证据来做判断，应该用多条数据来判断。<br><br>附：9型人格图<br><img src="http://ww2.sinaimg.cn/large/6fcc8c71gy1fh4cxv4lwfj20dw0drgmb.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Manage </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Traning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为了明天]]></title>
      <url>/posts/2017/61559a22/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;最近团队里有同学陆陆续续的离开了。每个人离开都有自己的理由，不评论好与坏，只想说说自己需要更加努力。才能有更好的明天。<a id="more"></a><br>&emsp;&emsp;应该给自己定一个“五年计划”，定下计划，然后围绕这个目标去努力。去实现这个定下的计划。在离开的同学里，有同学说，学不到东西，只是想说，学无止境，怎么会学不到东西。或许只是自己不愿意学习吧。学习永远不能依靠别人，学习需要自己努力、专研。有时候在想，我应该做点什么，计划点什么。为了明天。给自己定一个“五年计划”？让自己多学一些东西。让未来自己的选择面更宽广。更具有竞争力。<br><br>&emsp;&emsp;最近进入了迷茫阶段，在思考，在接下来的一段时间里，自己的路该怎么走，自己适合干什么，可以干什么？有时候在想，怎么样才能提高整个团队的战斗力，带领大家一起进步。一起走向更加美好的明天。加油吧。做好自己，学习新的技术。新的技能。为了明天。<br>&emsp;&emsp;不管怎么样，为了明天，大家都需要加油，需要不断的充实自己。每个人都选择了自己的路，相信大家都可以走的更好。更平稳。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jottings </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何创建搭建UiAutomator测试环境]]></title>
      <url>/posts/2017/6f5ea7d0/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;本文将简单介绍，UiAutomator2.0的环境搭建。<br><br>所需工具（环境)</p>
<ul>
<li>Java </li>
<li>Android SDK</li>
<li>Android Studio</li>
</ul>
<p>&emsp;&emsp;在完成Java 环境配置，Android SDK下载，和Android Studio的安装后，就可以进行环境搭建了。整个过程非常的简单。这里做个简要的记录。<br></p>
<a id="more"></a>
<ul>
<li>创建Android项目<br><br><img src="http://i4.buimg.com/587125/606ce584699a52ebs.png" alt="新建项目"><br></li>
<li>填写项目信息<br><br><img src="http://i4.buimg.com/587125/e60c91dfaaccb550s.png" alt="填写项目信息"><br></li>
</ul>
<p>&emsp;&emsp;这里填写默认信息即可，不用做修改.然后只需要添加一些依赖，环境搭建就完成了。<br></p>
<ul>
<li><p>编辑build.gradle文件<br><br><font color="red">注：这里需要编辑的是app下的build.gradle文件，不要搞错了哦！</font><br><br><img src="http://i4.buimg.com/587125/a3c639ea25af2fa9s.png" alt=""></p>
</li>
<li><p>在dependencies里添加依赖 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">****</div><div class="line"> //指定uiautomator的支持包</div><div class="line">    androidTestCompile &apos;com.android.support.test.uiautomator:uiautomator-v18:2.1.2&apos;</div><div class="line">    //指定使用的runner是0.5版</div><div class="line">    androidTestCompile &apos;com.android.support.test:runner:0.5&apos;</div><div class="line">    //指定rules的规则是0.5版</div><div class="line">    androidTestCompile &apos;com.android.support.test:rules:0.5&apos;</div><div class="line">    androidTestCompile &quot;com.android.support:support-annotations:25.3.0&quot;</div><div class="line">    //测试工具集，包括了Junit 3/4</div><div class="line">    androidTestCompile &apos;org.hamcrest:hamcrest-integration:1.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>完成的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 25</div><div class="line">    buildToolsVersion &quot;25.0.0&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;rory.tech.myapplication&quot;</div><div class="line">        minSdkVersion 18</div><div class="line">        targetSdkVersion 25</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">    &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:25.3.0&apos;</div><div class="line">    compile &apos;com.android.support.constraint:constraint-layout:1.0.2&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    //指定uiautomator的支持包</div><div class="line">    androidTestCompile &apos;com.android.support.test.uiautomator:uiautomator-v18:2.1.2&apos;</div><div class="line">    //指定使用的runner是0.5版</div><div class="line">    androidTestCompile &apos;com.android.support.test:runner:0.5&apos;</div><div class="line">    //指定rules的规则是0.5版</div><div class="line">    androidTestCompile &apos;com.android.support.test:rules:0.5&apos;</div><div class="line">    androidTestCompile &quot;com.android.support:support-annotations:25.3.0&quot;</div><div class="line">    //测试工具集，包括了Junit 3/4</div><div class="line">    androidTestCompile &apos;org.hamcrest:hamcrest-integration:1.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，UiAutomator 2.0的环境搭建就完成了。接下来，就可以编写你的测试用例了，需要提醒的是，要把case写到Android test文件夹里哦。如下图:<br><br><img src="http://i2.muimg.com/587125/b0040c8067e9954es.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UiAutomator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图像对比在自动化中的使用。]]></title>
      <url>/posts/2017/88071993/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;在自动化过程中，有些地方是必须要用到图像进行对比的。比如拍照。拍一张照片，然后检查拍摄的照片和预览的照片是否一致。在手工测试时，非常的方便。但是程序该怎么做呢？<br>&emsp;&emsp;这时就需要进行图像相似度的对比。最简单的一个对比方法就是对比两张图片的像素，通过对比像素来看两张图片是否相似，但这种方法有个致命的弱点。准确度不高。如果两张照片的光线不一样。也会被认定为两张图片。不过此方法很简单。我先介绍此方法。在后续的文章里，在介绍照片对比的方法。<br>&emsp;&emsp;首先，我来说一下，最简单的图像对比的实现。大家都知道，图片是由一个一个的像素点构成。比如我们常见的手机分辨率1920*1080.则，手机屏幕上一共就有2073600个像素点。那么我们要进行图像对比时，最简单的一种方法就是，对比每个像素点是否一样。下面我们先看来这种简单的对比方法是怎么实现的。</p>
<blockquote>
<p>此方法精度较低，误差较大，不适合用来对比照片等，有光线变化的图片，比较适合用于对比两张截图。照片的对比，在另一篇文章中介绍，使用汉明距离进行图像对比。</p>
</blockquote>
<a id="more"></a>
<p>&emsp;&emsp;我们接下来来看看最简单的图像对比如何操作。在进行图像操作前，我们需要有一张基准图片，用来做参照。</p>
<blockquote>
<p>基准图片可以在测试开始前截取，也可以存放到手机里，这里推荐是在开始测试前截图。</p>
</blockquote>
<ul>
<li>读取基准图片和对比图片。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> // Get the original image and compare image.</div><div class="line">Bitmap mBitmap1 = BitmapFactory.decodeFile(originalImagePath);</div><div class="line">Bitmap mBitmap2 = BitmapFactory.decodeFile(compareImagePath);</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>这里使用的是Bitmap的类，来从文件中创建一个bitmap对象，便于后续处理。</p>
</blockquote>
<ul>
<li><p>获取图片的宽高</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//get the image width and height.</div><div class="line">int width = mBitmap2.getWidth();</div><div class="line">int height = mBitmap2.getHeight();</div></pre></td></tr></table></figure>
</li>
<li><p>计算出图片的总像素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">double totalPixels = height * width;</div></pre></td></tr></table></figure>
</li>
<li><p>统计两种照片的不同像素信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for (int y = 0; y &lt; height; y++) &#123;</div><div class="line">              for (int x = 0; x &lt; width; x++) &#123;</div><div class="line">                  // find all not same pixels.</div><div class="line">                  if (mBitmap2.getPixel(x, y) != mBitmap1.getPixel(x, y)) &#123;</div><div class="line">                      numDiffPixels++;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>说明：<br>外循环以图片的高为限制，内循环以图片的宽为限制，循环比较像素点的信息，把所有不同的像素点存放起来。得到不同像素信息。</p>
</blockquote>
<ul>
<li><p>计算相似度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// get the all different pixel of image..</div><div class="line">double diffPercent = numDiffPixels / totalPixels;</div><div class="line"></div><div class="line">double result = 1.0 - diffPercent;</div><div class="line">System.out.println(&quot;The similarity Percent is:&quot; + result);</div><div class="line">return similarityPercent &lt;= result;</div></pre></td></tr></table></figure>
</li>
<li><p>完成代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * If you want compare two image is same or not,you can use this method.</div><div class="line">     * I recommend use method to compare two screen short.</div><div class="line">     * if you want to compare two photo,please use isSameAs(originalImagePath,compareImagePath).</div><div class="line">     *</div><div class="line">     * @param originalImagePath The original image path.</div><div class="line">     * @param compareImagePath  the compare image path.</div><div class="line">     * @param similarityPercent if the two image is same, Percent should be set to 100%</div><div class="line">     * @return is two image is same,the result is true.</div><div class="line">     */</div><div class="line">    public static boolean isSameAs(String originalImagePath,</div><div class="line">                                   String compareImagePath, double similarityPercent) &#123;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // Get the original image and compare image..</div><div class="line">            Bitmap mBitmap1 = BitmapFactory.decodeFile(originalImagePath);</div><div class="line">            Bitmap mBitmap2 = BitmapFactory.decodeFile(compareImagePath);</div><div class="line">            //get the image width and height.</div><div class="line">            int width = mBitmap2.getWidth();</div><div class="line">            int height = mBitmap2.getHeight();</div><div class="line">            // set the pixels number.</div><div class="line">            int numDiffPixels = 0;</div><div class="line">            // compare all pixels is same or not.</div><div class="line">            for (int y = 0; y &lt; height; y++) &#123;</div><div class="line">                for (int x = 0; x &lt; width; x++) &#123;</div><div class="line">                    // find all not same pixels.</div><div class="line">                    if (mBitmap2.getPixel(x, y) != mBitmap1.getPixel(x, y)) &#123;</div><div class="line">                        numDiffPixels++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // get the all pixel of the picture.</div><div class="line">            double totalPixels = height * width;</div><div class="line">            // get the all different pixel of image..</div><div class="line">            double diffPercent = numDiffPixels / totalPixels;</div><div class="line">            //</div><div class="line">            double result = 1.0 - diffPercent;</div><div class="line">            System.out.println(&quot;The similarity Percent is:&quot; + result);</div><div class="line">            return similarityPercent &lt;= result;</div><div class="line"></div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/RoryShen/Blog/tree/ImageCompare" title="点击访问我的GitHub" target="_blank" rel="external">完整示例下载</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UiAutomator </tag>
            
            <tag> ImageCompare </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Uiautomator中使用Content Provider获取数据]]></title>
      <url>/posts/2017/5f8513a3/</url>
      <content type="html"><![CDATA[<p><font color="red">注：1.本文针对Uiautomator2.0<br><br>&emsp;&emsp;2.本文不对Content Provider进行介绍，如果您对Content Provider不了解，建议您先阅读相关的文章</font></p>
<blockquote>
<p><a href="https://developer.android.com/guide/topics/providers/content-provider-basics.html" target="_blank" rel="external">Content Provider Basics</a><br><br><a href="http://blog.csdn.net/luoshengyang/article/details/6950440" target="_blank" rel="external">ConTent Provider 介绍</a><br></p>
</blockquote>
<p>&emsp;&emsp;推广自动化已经有半年的时间了。在推广过程中也也遇到了一些问题，今天来讲下如何使用Android的Content Provider来快捷的获取某个程序的数据。<br>&emsp;&emsp;首先先简单介绍一下，什么是Content Provider，这里直接摘抄官网的定义：<br></p>
<blockquote>
<p>A content provider manages access to a central repository of data.<br>A provider is part of an Android application, which often provides its own UI for working with the data.</p>
</blockquote>
<a id="more"></a>
<p>&emsp;&emsp;简单来讲，Conent Provider是用来访问程序的内部数据，由于谷歌的安全机制，外部程序是没办法访问，程序内部数据的，因此当需要访问某一个程序内部的数据时，就需要使用到Content Provider。这里举个例子：比如：应用A想知道手机里有多少个短信，那么就需要查询短信app的数据库，如果直接访问，肯定是不行的，因此就需要使用到Content provider来访问。<br><br>&emsp;&emsp;废话不多说，下面来讲讲在自动化测试中，Content Provider的使用场景，<br>不知道大家有没有遇到以下的问题：</p>
<ol>
<li>在自动化测试的时候，知道手机里有多少个联系人？<br></li>
<li>在手机里添加了一个联系人，想检查是否添加成功？<br></li>
<li>知道某个联系人的名字想获取他的手机号？<br></li>
</ol>
<p>&emsp;&emsp;如果让你来做你会怎么处理？怎么才能最简单？</p>
<ol>
<li>怎么在程序里获取手机里有多少个联系人？</li>
<li>是使用UICollection配合UIScrollable一页一页的滚动，然后统计？</li>
<li>如何知道添加的联系人是否成功了？滑动查找，遍历整个联系人列表？</li>
<li>如果在联系人少的时候，此方案听起来还是蛮不错的，但是，如果你手机里有1000个联系人呢？光一个查找就需要花费多少时间呢？</li>
</ol>
<p>&emsp;&emsp;因此这里强烈推荐你使用Content Provider，直接查询联系人的数据库。简单快捷。<br><br>&emsp;&emsp;下图，展示了。Content Provider 和其他组件的关系：<br><img src="http://p1.bqimg.com/587125/0fa42b22b9feeb4ds.png" alt="Content Provider和其他组件的关系"></p>
<p>下面我们来了解下，如何在测试中使用Content Provider。<br></p>
<p>1.在AndroidManifest.xml文件中添加读写联系人的权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot;&gt;&lt;/uses-permission&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_CONTACTS&quot;&gt;&lt;/uses-permission&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/587125/49711dfdb68f2575.png" alt="mainfest"></p>
<p>2.指定主机地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static Uri uri = ContactsContract.Data.CONTENT_URI;</div></pre></td></tr></table></figure></p>
<p>3.获取到目标应用程序的Content<br>注：为了方便后续使用，这里封装成一个方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static Context getTargetContext()&#123;</div><div class="line">return InstrumentationRegistry.getTargetContext();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>4.获取到contentResolver.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private static ContentResolver contentResolver = getTargetContext().getContentResolver();</div></pre></td></tr></table></figure></p>
<p>5.创建查询条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cursor cursorData = contentResolver.query(uri, null, null, null, null);</div></pre></td></tr></table></figure></p>
<p>注：null表示返回所有信息</p>
<p>6.操作cusor读取详细信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (cursorData != null) &#123;</div><div class="line">            while (cursorData.moveToNext()) &#123;</div><div class="line">                String mimeType = cursorData.getString(cursorData.getColumnIndex(ContactsContract.Contacts.Data.MIMETYPE));</div><div class="line"></div><div class="line">                String data1 = cursorData.getString(cursorData.getColumnIndex(ContactsContract.Contacts.Data.DATA1));</div><div class="line">                System.out.println(&quot;AAA&quot;+data1);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;最后附上完成的源码和截图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package rory.tech.contentproviderdemo;</div><div class="line"></div><div class="line">import android.content.ContentResolver;</div><div class="line">import android.content.Context;</div><div class="line">import android.database.Cursor;</div><div class="line">import android.net.Uri;</div><div class="line">import android.provider.ContactsContract;</div><div class="line">import android.support.test.InstrumentationRegistry;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by Rory on 2017/03/14.</div><div class="line"> */</div><div class="line"></div><div class="line">public class ContentProviderTestDemo &#123;</div><div class="line"></div><div class="line">    //Define the content provider host url.</div><div class="line">    private static Uri uri = ContactsContract.Data.CONTENT_URI;</div><div class="line">    private static ContentResolver contentResolver = getTargetContext().getContentResolver();</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void testContentProvider() &#123;</div><div class="line">        Cursor cursorData = contentResolver.query(uri, null, null, null, null);</div><div class="line">        if (cursorData != null) &#123;</div><div class="line">            while (cursorData.moveToNext()) &#123;</div><div class="line">                String mimeType = cursorData.getString(cursorData.getColumnIndex(ContactsContract.Contacts.Data.MIMETYPE));</div><div class="line"></div><div class="line">                String data1 = cursorData.getString(cursorData.getColumnIndex(ContactsContract.Contacts.Data.DATA1));</div><div class="line">                System.out.println(&quot;AAA&quot;+data1);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Context getTargetContext() &#123;</div><div class="line">        return InstrumentationRegistry.getTargetContext();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>系统联系人截图<br><img src="http://p1.bqimg.com/587125/fa2e56e465047440s.png" alt="系统联系人截图"><br><br>控制台打印截图：<br><br><img src="http://p1.bqimg.com/587125/33c333464f44ce82.png" alt="控制台打印"><br>注：</p>
<ol>
<li>这里只是一个Demo，没有做处理，这样获取到的信息，是不方便查看的，你不知道1001-2是名字还是电话。所以在实际使用中，需要对信息进行判断。</li>
<li>可以使用mimeType来进行数据的识别。这里就不做演示啦！！！</li>
<li>实际使用时建议使用Java Been来做数据处理。<br><br><a href="https://github.com/RoryShen/Blog/tree/ContentProvider" title="点击访问我的GitHub" target="_blank" rel="external">完整示例下载</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Test </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ContentProvider </tag>
            
            <tag> UiAutomator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[管理者在企业中的精准定位]]></title>
      <url>/posts/2017/f2ce0f44/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;今天参加了智联公开课，《从业务到管理-管理者在企业中的精准定位》，感觉收获还是蛮多，趁热打铁，把今天的分享内容整理一下<br><br>&emsp;&emsp;在课程刚开始的时候，王老师给我们分析了一下当前管理工作中存在的痛点。</p>
<ul>
<li>做事一把好手，管人麻烦不断</li>
<li>执着于做高级业务员</li>
<li>不能提升团队成员的整体能力 </li>
<li>下属对我们抱怨增加</li>
<li>怀恋旧时光。<br><a id="more"></a>
</li>
</ul>
<p>&emsp;&emsp;老师的第一个问题是：什么是企业文化？<br><br>&emsp;&emsp;文化，即一种习惯，文化就是一群人想事情，做事情的一种习惯。比如吃饭，我们第一时间想到的就是筷子，那么吃饭用筷子就是一种习惯，也是一种文化。属于我们的文化。<br><br>&emsp;&emsp;在日常的工作中，不要让自己变成一个高级业务员。要明白做管理和做技术是两个不同的维度，管理团队，手下有那么多做事的人，要把一些事分给下属，要相信他们可以把事情做好，别因为自己做效率高，考虑全面，就把所有的事情都揽到自己身上。拒绝“让开，我来”的想法。如果什么事情都自己来，不给下属锻炼的机会，那么他们何来成长，什么事情都，让开，我来。团队成员的能力不会得到提升，对整个团队的发展不利。所以哪怕觉得下属做的不如自己好，也要给机会让下属去做，也许在做的过程中会放一些错误，让下属在犯错中成长，但要注意给下属引导，避免下属犯致命的错误。人非圣贤，孰能无过。<br><br>&emsp;&emsp;如果因为害怕下属犯错，做不好、效率低，而什么事情都亲力亲为，那么你真的就是一个高级业务员。时间长了下属遇到问题，就会找你，不会动脑子，变得什么事情都需要你做好。一方面不利于团队稳定，另一方面也会给团队成员带来挫折感，让对方觉得没意思，学不到东西。所以要适当的让下属犯错，犯一些觉得疼的错误，只有犯错了。才能总结，更好的成长。<br><br>&emsp;&emsp;同时老师也提到了，如果一个人一直不犯错，那么大家对他的期待就会越来越高，权威也越来越大，时间久了，容易产生自负心理，一旦犯错了，就会否认错误，甚至掩盖错误，直到错误无法被掩盖。引起不可挽回的后果。<br><br>&emsp;&emsp;如何减少下属对我们的抱怨？总结起来可以归为以下几点：<br></p>
<ul>
<li>你是谁？</li>
<li>他是谁？</li>
<li>我要他做什么？<br></li>
</ul>
<p>&emsp;&emsp;作为管理者，我们需要再思维上做转换，从管事，管东西的角度转变过来，转变为管人。要把下属当人看，给予下属尊重，关怀。比如积极的和下属进行互动，主动和下属打招呼等。建立和下属的沟通机制，让下属感觉到，他是一个人，作为人的存在价值。当下属遇到困难时，给予下属引导，帮助他理清思路，找到解决问题的答案，而不是直接给予答案。比如最近做项目时，PM让我预估测试一轮所需的时间，我全无头绪，找到我的领导，领导帮助我分析，引导我怎么去做计划，怎么做评估。这种效果比直接给予答案有效果，当再次遇到类似问题时，我就能够分析，处理。因此在后续工作中也要注意，给予下属引导，而不是粗暴的给予答案。我觉得老师说的很有道理，领导，领导，引领与指导。而不是只会发脾气。板着脸训人<br><br>&emsp;&emsp;在日常工作中，要善于观察，善于记录，了解下属的特点。这个下属有什么爱好，有什么特产，喜欢什么，不喜欢什么。有没有对象等等。了解下属，了解下属的需求是什么。他在缺少什么。下属缺少什么，在管理时，就给予下属什么，缺啥补啥。比如对于不太自信的下属，就要给予鼓励，帮助他建立自信，哪怕他犯了错误，都给予鼓励，不要过度批评，避免批评导致下属更加缺乏自信。对待下属要从多个维度来分析。要考虑多个因素，避免一刀切，只看到一面。要横向纵向比较。在指定规则时，要考虑到人性的懒惰性与变通性，要防止下属作弊。<br><br>&emsp;&emsp;我是谁？我需要做什么？我能给下属什么。作为管理人员，我们要管理好自己，管理好自己的情绪，让下属安心，避免自己成为气氛杀手。要和下属沟通，交流，要认清自己的角色，不要做上级的法官。要知道，角色的不同决定了眼界的不同。同一个事物，不同的人，因为所处的层级不一样，他眼中看到的东西是不一样的。而且这种差异，用语言也无法解释。比如，榴莲的味道，你没法用语言给一个没吃过榴莲的人描述清楚，榴莲是什么味道，只有自己品尝过后才知道。<br><br>&emsp;&emsp;作为领导，同时也作为下属，要做好自己的本分。珍惜手中领导给予的权利，不断提升自己，让自己有能力，能够承受得起这份权利。作为下属要及时的向领导汇报工作，让领导明白，你是一个不用质疑的人。特别是在做重大决定时，不要以为自己比领导聪明，不要替领导做决定。要让自己变得可控，可信任。只有这样才能做的长久。避免成为一只不受控制的手。<br><br>&emsp;&emsp;作为下属，要少说话多做事，但也不能只做事不说话。在做事情时，要有底线（限），但光做好底线是永远不够的。做事情还需要做够别人的期待，你需要不断的超越别人的期待。要明白，作为领导（下属）自己该做什么，自己不该做什么，该做的事，不会也得会，不该自己做的事，会也得不会。别越权。在和领导，下属沟通时，要注意方式方法，找到最有效，最没有障碍的沟通路径，只有这样，这才是有效的沟通。在对待下属时，要补其所缺。缺啥补啥，不缺不补。<br><br>&emsp;&emsp;作为领导，需要以身作则，做好榜样。在和其他部门沟通时，注意避免自己成为“山大王”，要换个角度看问题，让自己成为一个T字形的人才，要对其他部门的工作有一定的了解，避免对其他部门工作不了解的基础上，在部门内部，指指点点。增加部门之间的矛盾与对立。作为管理者要让上下级之间的沟通成为习惯，部门之间的沟通成为习惯，要对其他部门人份内的事业表示一份感激。在和其他部门沟通时，要使用双方都能沟通的方式。<br><br><br>&emsp;&emsp;啦啦啦，一堆流水账。总结完毕。感觉今天的学习，收获蛮多。最后附图几张。啦啦啦</p>
<p><img src="http://i1.piimg.com/587125/3d435b42cc4b25fcs.jpg" alt="开场互动"><br><br>让我们一起左手右手一个慢动作<br><img src="http://i1.piimg.com/587125/a4c85f2a81cc1f08s.jpg" alt="开场互动"><br><br>忘记是在干嘛了<br><img src="http://i1.piimg.com/587125/14cdfaffa69a07b5s.jpg" alt="现场图"></p>
]]></content>
      
        <categories>
            
            <category> Manage </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Traning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二月]]></title>
      <url>/posts/2017/52178317/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;二月，正式一个忙碌的季节，各种事情堆积在一起，弄的有点费劲。最近手里接了一个项目，从来没接触过。一切都需要从头开始，从最简单的需求，功能学习，测试工具等等。感觉太具有挑战性。<br>&emsp;&emsp;突然一下这个项目，优先级就提高了，之前PM还说这个项目，不急，结果今天一开会，就两个月的测试周期，压力山大。希望不要出啥幺蛾子。从无到有，一个慢慢学习与累积的过程。虽然现在感觉头大，但过了这段时间，相信自己会有一个较大的提升。加油！！！<br><br>&emsp;&emsp;然后就是最近越来越懒了，不想锻炼，不想看书，不想学习。哎。贵在坚持。加油。新的一年，多读书，多跑步。坚持运动。多休息！</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jottings </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello,Word!]]></title>
      <url>/posts/2017/f3ba4e3a/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;年后突发奇想，想新建一个自己的博客。申请博客，又太复杂，就想着弄一个自己的博客。嘿嘿。终于弄好了。欧耶！！<br><br>&emsp;&emsp;啦啦啦。好嘞。开博了。后续来记录下自己的成长吧。加油！</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Jottings </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
